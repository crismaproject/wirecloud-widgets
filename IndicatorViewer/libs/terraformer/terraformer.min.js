/*! Terraformer JS - 1.0.4 - 2014-05-22
*   https://github.com/esri/Terraformer
*   Copyright (c) 2014 Environmental Systems Research Institute, Inc.
*   Licensed MIT */!function(a,b){"object"==typeof module&&"object"==typeof module.exports&&(exports=module.exports=b()),"object"==typeof window&&(a.Terraformer=b())}(this,function(){function a(a){return"[object Array]"===Object.prototype.toString.call(a)}function b(){var a=Array.prototype.slice.apply(arguments);void 0!==typeof console&&console.warn&&console.warn.apply(console,a)}function c(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a}function d(a){if(a.type)switch(a.type){case"Point":return[a.coordinates[0],a.coordinates[1],a.coordinates[0],a.coordinates[1]];case"MultiPoint":return g(a.coordinates);case"LineString":return g(a.coordinates);case"MultiLineString":return e(a.coordinates);case"Polygon":return e(a.coordinates);case"MultiPolygon":return f(a.coordinates);case"Feature":return a.geometry?d(a.geometry):null;case"FeatureCollection":return h(a);case"GeometryCollection":return i(a);default:throw new Error("Unknown type: "+a.type)}return null}function e(a){for(var b=null,c=null,d=null,e=null,f=0;f<a.length;f++)for(var g=a[f],h=0;h<g.length;h++){var i=g[h],j=i[0],k=i[1];null===b?b=j:b>j&&(b=j),null===c?c=j:j>c&&(c=j),null===d?d=k:d>k&&(d=k),null===e?e=k:k>e&&(e=k)}return[b,d,c,e]}function f(a){for(var b=null,c=null,d=null,e=null,f=0;f<a.length;f++)for(var g=a[f],h=0;h<g.length;h++)for(var i=g[h],j=0;j<i.length;j++){var k=i[j],l=k[0],m=k[1];null===b?b=l:b>l&&(b=l),null===c?c=l:l>c&&(c=l),null===d?d=m:d>m&&(d=m),null===e?e=m:m>e&&(e=m)}return[b,d,c,e]}function g(a){for(var b=null,c=null,d=null,e=null,f=0;f<a.length;f++){var g=a[f],h=g[0],i=g[1];null===b?b=h:b>h&&(b=h),null===c?c=h:h>c&&(c=h),null===d?d=i:d>i&&(d=i),null===e?e=i:i>e&&(e=i)}return[b,d,c,e]}function h(a){for(var b,c=[],e=a.features.length-1;e>=0;e--)b=d(a.features[e].geometry),c.push([b[0],b[1]]),c.push([b[2],b[3]]);return g(c)}function i(a){for(var b,c=[],e=a.geometries.length-1;e>=0;e--)b=d(a.geometries[e]),c.push([b[0],b[1]]),c.push([b[2],b[3]]);return g(c)}function k(a){var b=d(a);return{x:b[0],y:b[1],w:Math.abs(b[0]-b[2]),h:Math.abs(b[1]-b[3])}}function l(a){return a*T}function m(a){return a*U}function n(a,b){for(var c=0;c<a.length;c++)"number"==typeof a[c][0]&&(a[c]=b(a[c])),"object"==typeof a[c]&&(a[c]=n(a[c],b));return a}function o(a){var b=a[0],c=a[1];return[l(b/S)-360*Math.floor((l(b/S)+180)/360),l(Math.PI/2-2*Math.atan(Math.exp(-1*c/S)))]}function p(a){var b=a[0],c=Math.max(Math.min(a[1],89.99999),-89.99999);return[m(b)*S,S/2*Math.log((1+Math.sin(m(c)))/(1-Math.sin(m(c))))]}function q(a,b,c){if("Point"===a.type)a.coordinates=b(a.coordinates);else if("Feature"===a.type)a.geometry=q(a.geometry,b,!0);else if("FeatureCollection"===a.type)for(var d=0;d<a.features.length;d++)a.features[d]=q(a.features[d],b,!0);else if("GeometryCollection"===a.type)for(var e=0;e<a.geometries.length;e++)a.geometries[e]=q(a.geometries[e],b,!0);else a.coordinates=n(a.coordinates,b);return c||b===p&&(a.crs=V),b===o&&delete a.crs,a}function r(a){return q(a,p)}function s(a){return q(a,o)}function t(a,b){return a[0]>b[0]?-1:a[0]<b[0]?1:a[1]>b[1]?-1:a[1]<b[1]?1:0}function u(a,b,c){return(b[0]-a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])}function v(a){var b,c,d=0,e=[];for(a=a.sort(t),b=0;b<a.length;++b){for(;d>=2&&u(e[d-2],e[d-1],a[b])<=0;)--d;e[d++]=a[b]}for(b=a.length-2,c=d+1;b>=0;--b){for(;d>=c&&u(e[d-2],e[d-1],a[b])<=0;)--d;e[d++]=a[b]}return e}function w(a){for(var b,c=0;c<a.length-3;c++){var d=a[c],e=a[c+1],f=a[c+2],g=[e[0]-d[0],e[1]-d[1]],h=f[0]*g[1]-f[1]*g[0]+g[0]*d[1]-g[1]*d[0];if(0===c)b=0>h?!0:!1;else if(b&&h>0||!b&&0>h)return!1}return!0}function x(a,b){for(var c=!1,d=-1,e=a.length,f=e-1;++d<e;f=d)(a[d][1]<=b[1]&&b[1]<a[f][1]||a[f][1]<=b[1]&&b[1]<a[d][1])&&b[0]<(a[f][0]-a[d][0])*(b[1]-a[d][1])/(a[f][1]-a[d][1])+a[d][0]&&(c=!c);return c}function y(a,b){if(a&&a.length){if(1===a.length)return x(a[0],b);if(x(a[0],b)){for(var c=1;c<a.length;c++)if(x(a[c],b))return!1;return!0}return!1}return!1}function z(a,b,c,d){var e=(d[0]-c[0])*(a[1]-c[1])-(d[1]-c[1])*(a[0]-c[0]),f=(b[0]-a[0])*(a[1]-c[1])-(b[1]-a[1])*(a[0]-c[0]),g=(d[1]-c[1])*(b[0]-a[0])-(d[0]-c[0])*(b[1]-a[1]);if(0!==g){var h=e/g,i=f/g;if(h>=0&&1>=h&&i>=0&&1>=i)return!0}return!1}function A(a){return!isNaN(parseFloat(a))&&isFinite(a)}function B(a,b){if(A(a[0][0])){if(A(b[0][0])){for(var c=0;c<a.length-1;c++)for(var d=0;d<b.length-1;d++)if(z(a[c],a[c+1],b[d],b[d+1]))return!0}else for(var e=0;e<b.length;e++)if(B(a,b[e]))return!0}else for(var f=0;f<a.length;f++)if(B(a[f],b))return!0;return!1}function C(a){for(var b=[],c=0;c<a.length;c++){var d=a[c].slice();D(d[0],d[d.length-1])===!1&&d.push(d[0]),b.push(d)}return b}function D(a,b){for(var c=0;c<a.length;c++)if(a[c]!==b[c])return!1;return!0}function E(a,b){if(a.length!==b.length)return!1;for(var c=a.slice().sort(t),d=b.slice().sort(t),e=0;e<c.length;e++){if(c[e].length!==d[e].length)return!1;for(var f=0;f<c.length;f++)if(c[e][f]!==d[e][f])return!1}return!0}function F(a){if(a)switch(a.type){case"Point":return new G(a);case"MultiPoint":return new H(a);case"LineString":return new I(a);case"MultiLineString":return new J(a);case"Polygon":return new K(a);case"MultiPolygon":return new L(a);case"Feature":return new M(a);case"FeatureCollection":return new N(a);case"GeometryCollection":return new O(a);default:throw new Error("Unknown type: "+a.type)}}function G(b){var d=Array.prototype.slice.call(arguments);if(b&&"Point"===b.type&&b.coordinates)c(this,b);else if(b&&a(b))this.coordinates=b;else{if(!(d.length>=2))throw"Terraformer: invalid input for Terraformer.Point";this.coordinates=d}this.type="Point"}function H(b){if(b&&"MultiPoint"===b.type&&b.coordinates)c(this,b);else{if(!a(b))throw"Terraformer: invalid input for Terraformer.MultiPoint";this.coordinates=b}this.type="MultiPoint"}function I(b){if(b&&"LineString"===b.type&&b.coordinates)c(this,b);else{if(!a(b))throw"Terraformer: invalid input for Terraformer.LineString";this.coordinates=b}this.type="LineString"}function J(b){if(b&&"MultiLineString"===b.type&&b.coordinates)c(this,b);else{if(!a(b))throw"Terraformer: invalid input for Terraformer.MultiLineString";this.coordinates=b}this.type="MultiLineString"}function K(b){if(b&&"Polygon"===b.type&&b.coordinates)c(this,b);else{if(!a(b))throw"Terraformer: invalid input for Terraformer.Polygon";this.coordinates=b}this.type="Polygon"}function L(b){if(b&&"MultiPolygon"===b.type&&b.coordinates)c(this,b);else{if(!a(b))throw"Terraformer: invalid input for Terraformer.MultiPolygon";this.coordinates=b}this.type="MultiPolygon"}function M(a){if(a&&"Feature"===a.type)c(this,a);else{if(!(a&&a.type&&a.coordinates))throw"Terraformer: invalid input for Terraformer.Feature";this.geometry=a}this.type="Feature"}function N(b){if(b&&"FeatureCollection"===b.type&&b.features)c(this,b);else{if(!a(b))throw"Terraformer: invalid input for Terraformer.FeatureCollection";this.features=b}this.type="FeatureCollection"}function O(b){if(b&&"GeometryCollection"===b.type&&b.geometries)c(this,b);else if(a(b))this.geometries=b;else{if(!b.coordinates||!b.type)throw"Terraformer: invalid input for Terraformer.GeometryCollection";this.type="GeometryCollection",this.geometries=[b]}this.type="GeometryCollection"}function P(a,b,c){for(var d=p(a),e=c||64,f={type:"Polygon",coordinates:[[]]},g=1;e>=g;g++){var h=g*(360/e)*Math.PI/180;f.coordinates[0].push([d[0]+b*Math.cos(h),d[1]+b*Math.sin(h)])}return f.coordinates=C(f.coordinates),s(f)}function Q(a,b,d){var e=d||64,f=b||250;if(!a||a.length<2||!f||!e)throw new Error("Terraformer: missing parameter for Terraformer.Circle");c(this,new M({type:"Feature",geometry:P(a,f,e),properties:{radius:f,center:a,steps:e}}))}var R={},S=6378137,T=57.29577951308232,U=.017453292519943,V={type:"link",properties:{href:"http://spatialreference.org/ref/sr-org/6928/ogcwkt/",type:"ogcwkt"}},W={type:"link",properties:{href:"http://spatialreference.org/ref/epsg/4326/ogcwkt/",type:"ogcwkt"}},X=["length"];return F.prototype.toMercator=function(){return r(this)},F.prototype.toGeographic=function(){return s(this)},F.prototype.envelope=function(){return k(this)},F.prototype.bbox=function(){return d(this)},F.prototype.convexHull=function(){var a,b,c=[];if("Point"===this.type)return null;if("LineString"===this.type||"MultiPoint"===this.type){if(!(this.coordinates&&this.coordinates.length>=3))return null;c=this.coordinates}else if("Polygon"===this.type||"MultiLineString"===this.type){if(!(this.coordinates&&this.coordinates.length>0))return null;for(a=0;a<this.coordinates.length;a++)c=c.concat(this.coordinates[a]);if(c.length<3)return null}else if("MultiPolygon"===this.type){if(!(this.coordinates&&this.coordinates.length>0))return null;for(a=0;a<this.coordinates.length;a++)for(b=0;b<this.coordinates[a].length;b++)c=c.concat(this.coordinates[a][b]);if(c.length<3)return null}else if("Feature"===this.type){var d=new F(this.geometry);return d.convexHull()}return new K({type:"Polygon",coordinates:C([v(c)])})},F.prototype.toJSON=function(){var a={};for(var b in this)this.hasOwnProperty(b)&&-1===X.indexOf(b)&&(a[b]=this[b]);return a.bbox=d(this),a},F.prototype.contains=function(a){return new F(a).within(this)},F.prototype.within=function(a){var b,c,d;if("Point"===a.type&&"Point"===this.type)return D(this.coordinates,a.coordinates);if("MultiLineString"===a.type&&"Point"===this.type)for(c=0;c<a.coordinates.length;c++){var e={type:"LineString",coordinates:a.coordinates[c]};if(this.within(e))return!0}if(("LineString"===a.type||"MultiPoint"===a.type)&&"Point"===this.type)for(c=0;c<a.coordinates.length;c++){if(this.coordinates.length!==a.coordinates[c].length)return!1;if(D(this.coordinates,a.coordinates[c]))return!0}if("Polygon"===a.type){if("Polygon"===this.type){if(a.coordinates.length===this.coordinates.length)for(c=0;c<this.coordinates.length;c++)if(E(this.coordinates[c],a.coordinates[c]))return!0;return this.coordinates.length&&y(a.coordinates,this.coordinates[0][0])?!B(C(this.coordinates),C(a.coordinates)):!1}if("Point"===this.type)return y(a.coordinates,this.coordinates);if("LineString"===this.type||"MultiPoint"===this.type){if(!this.coordinates||0===this.coordinates.length)return!1;for(c=0;c<this.coordinates.length;c++)if(y(a.coordinates,this.coordinates[c])===!1)return!1;return!0}if("MultiLineString"===this.type){for(c=0;c<this.coordinates.length;c++){var f=new I(this.coordinates[c]);if(f.within(a)===!1)return d++,!1}return!0}if("MultiPolygon"===this.type){for(c=0;c<this.coordinates.length;c++){var g=new F({type:"Polygon",coordinates:this.coordinates[c]});if(g.within(a)===!1)return!1}return!0}}if("MultiPolygon"===a.type){if("Point"===this.type){if(a.coordinates.length)for(c=0;c<a.coordinates.length;c++)if(b=a.coordinates[c],y(b,this.coordinates)&&B([this.coordinates],a.coordinates)===!1)return!0;return!1}if("Polygon"===this.type){for(c=0;c<this.coordinates.length;c++)if(a.coordinates[c].length===this.coordinates.length)for(j=0;j<this.coordinates.length;j++)if(E(this.coordinates[j],a.coordinates[c][j]))return!0;if(B(this.coordinates,a.coordinates)===!1&&a.coordinates.length){for(c=0;c<a.coordinates.length;c++)b=a.coordinates[c],d=y(b,this.coordinates[0][0])===!1?!1:!0;return d}}else if("LineString"===this.type||"MultiPoint"===this.type)for(c=0;c<a.coordinates.length;c++){var h={type:"Polygon",coordinates:a.coordinates[c]};return this.within(h)?!0:!1}else{if("MultiLineString"===this.type){for(c=0;c<this.coordinates.length;c++){var i=new I(this.coordinates[c]);if(i.within(a)===!1)return!1}return!0}if("MultiPolygon"===this.type){for(c=0;c<a.coordinates.length;c++){var k={type:"Polygon",coordinates:a.coordinates[c]};if(this.within(k)===!1)return!1}return!0}}}return!1},F.prototype.intersects=function(a){"Feature"===a.type&&(a=a.geometry);var c=new F(a);if(this.within(a)||c.within(this))return!0;if("Point"!==this.type&&"MultiPoint"!==this.type&&"Point"!==a.type&&"MultiPoint"!==a.type)return B(this.coordinates,a.coordinates);if("Feature"===this.type){var d=new F(this.geometry);return d.intersects(a)}return b("Type "+this.type+" to "+a.type+" intersection is not supported by intersects"),!1},G.prototype=new F,G.prototype.constructor=G,H.prototype=new F,H.prototype.constructor=H,H.prototype.forEach=function(a){for(var b=0;b<this.coordinates.length;b++)a.apply(this,[this.coordinates[b],b,this.coordinates]);return this},H.prototype.addPoint=function(a){return this.coordinates.push(a),this},H.prototype.insertPoint=function(a,b){return this.coordinates.splice(b,0,a),this},H.prototype.removePoint=function(a){return"number"==typeof a?this.coordinates.splice(a,1):this.coordinates.splice(this.coordinates.indexOf(a),1),this},H.prototype.get=function(a){return new G(this.coordinates[a])},I.prototype=new F,I.prototype.constructor=I,I.prototype.addVertex=function(a){return this.coordinates.push(a),this},I.prototype.insertVertex=function(a,b){return this.coordinates.splice(b,0,a),this},I.prototype.removeVertex=function(a){return this.coordinates.splice(a,1),this},J.prototype=new F,J.prototype.constructor=J,J.prototype.forEach=function(a){for(var b=0;b<this.coordinates.length;b++)a.apply(this,[this.coordinates[b],b,this.coordinates])},J.prototype.get=function(a){return new I(this.coordinates[a])},K.prototype=new F,K.prototype.constructor=K,K.prototype.addVertex=function(a){return this.coordinates[0].push(a),this},K.prototype.insertVertex=function(a,b){return this.coordinates[0].splice(b,0,a),this},K.prototype.removeVertex=function(a){return this.coordinates[0].splice(a,1),this},K.prototype.close=function(){this.coordinates=C(this.coordinates)},L.prototype=new F,L.prototype.constructor=L,L.prototype.forEach=function(a){for(var b=0;b<this.coordinates.length;b++)a.apply(this,[this.coordinates[b],b,this.coordinates])},L.prototype.get=function(a){return new K(this.coordinates[a])},L.prototype.close=function(){var a=[];return this.forEach(function(b){a.push(C(b))}),this.coordinates=a,this},M.prototype=new F,M.prototype.constructor=M,N.prototype=new F,N.prototype.constructor=N,N.prototype.forEach=function(a){for(var b=0;b<this.features.length;b++)a.apply(this,[this.features[b],b,this.features])},N.prototype.get=function(a){var b;return this.forEach(function(c){c.id===a&&(b=c)}),new M(b)},O.prototype=new F,O.prototype.constructor=O,O.prototype.forEach=function(a){for(var b=0;b<this.geometries.length;b++)a.apply(this,[this.geometries[b],b,this.geometries])},O.prototype.get=function(a){return new F(this.geometries[a])},Q.prototype=new F,Q.prototype.constructor=Q,Q.prototype.recalculate=function(){return this.geometry=P(this.properties.center,this.properties.radius,this.properties.steps),this},Q.prototype.center=function(a){return a&&(this.properties.center=a,this.recalculate()),this.properties.center},Q.prototype.radius=function(a){return a&&(this.properties.radius=a,this.recalculate()),this.properties.radius},Q.prototype.steps=function(a){return a&&(this.properties.steps=a,this.recalculate()),this.properties.steps},Q.prototype.toJSON=function(){var a=F.prototype.toJSON.call(this);return a},R.Primitive=F,R.Point=G,R.MultiPoint=H,R.LineString=I,R.MultiLineString=J,R.Polygon=K,R.MultiPolygon=L,R.Feature=M,R.FeatureCollection=N,R.GeometryCollection=O,R.Circle=Q,R.toMercator=r,R.toGeographic=s,R.Tools={},R.Tools.positionToMercator=p,R.Tools.positionToGeographic=o,R.Tools.applyConverter=q,R.Tools.toMercator=r,R.Tools.toGeographic=s,R.Tools.createCircle=P,R.Tools.calculateBounds=d,R.Tools.calculateEnvelope=k,R.Tools.coordinatesContainPoint=x,R.Tools.polygonContainsPoint=y,R.Tools.arraysIntersectArrays=B,R.Tools.coordinatesContainPoint=x,R.Tools.coordinatesEqual=E,R.Tools.convexHull=v,R.Tools.isConvex=w,R.MercatorCRS=V,R.GeographicCRS=W,R});